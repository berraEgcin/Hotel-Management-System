DROP DATABASE IF exists hotel_management_system1;

CREATE database hotel_management_system1;

USE hotel_management_system1;

DROP TABLE IF EXISTS schedulee;
DROP TABLE IF EXISTS housekeeping;
DROP TABLE IF EXISTS receptionist;
DROP TABLE IF EXISTS employee_name;
DROP TABLE IF EXISTS employee;
DROP TABLE IF EXISTS payment;
DROP TABLE IF EXISTS booking;
DROP TABLE IF EXISTS room;
DROP TABLE IF EXISTS room_type;
DROP TABLE IF EXISTS inviteeName;
DROP TABLE IF EXISTS invitee;
DROP TABLE IF EXISTS guest_name;
DROP TABLE IF EXISTS guest;
DROP TABLE IF EXISTS loyalty;
DROP TABLE IF EXISTS address;
DROP TABLE IF EXISTS hotel;
DROP TABLE IF EXISTS administrator;



 -- CHECK FOREIGN KEYS AGAIN
-- Hotel and admin,employee
 --

CREATE TABLE hotel
(
    hotel_ID int NOT NULL,
    hotel_name varchar(255),
    PRIMARY KEY (hotel_ID)
);


CREATE TABLE loyalty
(
    loyalty_id int NOT NULL,
    loyalty_rank ENUM('bronze', 'silver', 'gold'),
    min_points int AS (
        CASE loyalty_rank
        WHEN 'bronze' THEN 0
        WHEN 'silver' THEN 10
        WHEN 'gold' THEN 50
    END),
    max_points int AS (
        CASE loyalty_rank
        WHEN 'bronze' THEN 9
        WHEN 'silver' THEN 49
        WHEN 'gold' THEN 999999999
    END),
    discount_percentage DECIMAL(2,0) AS (
        CASE loyalty_rank
        WHEN 'bronze' THEN 5
        WHEN 'silver' THEN 15
        WHEN 'gold' THEN 25
        END),
    PRIMARY KEY (loyalty_id)
);

CREATE TABLE administrator
(
    admin_ID int NOT NULL,
    PRIMARY KEY (admin_ID)
);

CREATE TABLE room_type
(
    type_ID int NOT NULL,
    type_name ENUM('Single', 'Double', 'Suite'),
    max_occupancy int,
    price int,
    bed_count int,
    bed_type ENUM('Single', 'Double', 'Queen', 'King'),
    description varchar(255),
    PRIMARY KEY (type_ID)
);
CREATE TABLE room
(
    room_ID int NOT NULL,
    type_ID int NOT NULL,
    isClean ENUM('Clean', 'Dirty', 'In Progress'),
    isAvailable BOOLEAN DEFAULT TRUE,
    PRIMARY KEY (room_ID),
    FOREIGN KEY (type_ID) REFERENCES room_type(type_ID) -- rooma mı room type a mı foreign gidecek
);



CREATE TABLE address
(
    hotel_ID int NOT NULL,
    street varchar(255),
    city varchar(255),
    district varchar(255),
    PRIMARY KEY (hotel_ID),
    FOREIGN KEY (hotel_ID) REFERENCES hotel(hotel_ID)
);

CREATE TABLE employee
(
    employee_ID int NOT NULL,
    role ENUM('receptionist', 'housekeeping'),
    PRIMARY KEY (employee_ID)
);


CREATE TABLE guest
(   guest_ID      int NOT NULL,
    birth_date    DATE,
    b_points int,
    loyalty_id int,
	age int,
	phone_number varchar(10), -- phone number is a 10-digit number
    PRIMARY KEY (guest_ID),
    FOREIGN KEY (loyalty_id) REFERENCES loyalty(loyalty_id)
);

DELIMITER //

CREATE TRIGGER age_trigger
BEFORE INSERT ON guest
FOR EACH ROW
BEGIN
    SET NEW.age = TIMESTAMPDIFF(YEAR, NEW.birth_date, CURDATE());
END;
	DELIMITER ;


-- FINISH




CREATE TABLE guest_name
(
    guest_ID  int NOT NULL,
    g_first_Name varchar(255),
    g_last_name  varchar(255),
    PRIMARY KEY (guest_ID),
    FOREIGN KEY (guest_ID) REFERENCES guest (guest_ID)
);

CREATE TABLE invitee
(
    invitee_ID int NOT NULL,
    guest_ID int NOT NULL,
    PRIMARY KEY (invitee_ID, guest_ID), -- composite primary key for the weak entity set
    FOREIGN KEY (guest_ID) REFERENCES guest (guest_ID)
);

CREATE TABLE inviteeName
(
    invitee_ID int NOT NULL,
    i_first_name varchar(255),
    i_last_name varchar(255),
    FOREIGN KEY (invitee_ID) REFERENCES invitee (invitee_ID)
);



CREATE TABLE booking
(
    booking_ID int NOT NULL,
    guest_ID int NOT NULL, -- foreign key
    room_ID int NOT NULL, -- foreign key
    num_Of_Guests int,
    check_in DATE,
    check_out DATE,
    b_status ENUM('confirmed', 'cancelled', 'pending'),
    PRIMARY KEY (booking_ID),
    FOREIGN KEY (guest_ID) REFERENCES guest (guest_ID),
    FOREIGN KEY (room_ID) REFERENCES room (room_ID)
);



CREATE TABLE payment
(
    pay_ID int NOT NULL,
    booking_ID int NOT NULL,
    pay_method ENUM('cash', 'card'),
    pay_time ENUM('check out', 'advance'),
    amount int,
    PRIMARY KEY (pay_ID),
    FOREIGN KEY (booking_ID) REFERENCES booking (booking_ID)
);



CREATE TABLE employee_name
(
    employee_ID int NOT NULL,
    e_first_name varchar(255),
    e_last_name varchar(255),
    PRIMARY KEY (employee_ID),
    FOREIGN KEY (employee_ID) REFERENCES employee(employee_ID)
);

CREATE TABLE receptionist
(
    employee_ID int NOT NULL,
    PRIMARY KEY (employee_ID),
    FOREIGN KEY (employee_ID) REFERENCES employee(employee_ID)
);

CREATE TABLE housekeeping
(
    employee_ID int NOT NULL,
    PRIMARY KEY (employee_ID),
    FOREIGN KEY (employee_ID) REFERENCES employee(employee_ID)
);

CREATE TABLE schedulee
(
    schedulee_ID int NOT NULL,
    employee_ID int NOT NULL, -- foreign key
    room_ID int NOT NULL, -- foreign key
    cleaning_date DATE,
    status ENUM('Completed', 'In Progress', 'Not Started'),
    PRIMARY KEY (schedulee_ID),
    FOREIGN KEY (employee_ID) REFERENCES housekeeping(employee_ID), -- housekeeping is a subclass of employee
    FOREIGN KEY (room_ID) REFERENCES room(room_ID)
);






-- DML PART

-- Start with Hotel since it's a parent table
INSERT INTO hotel (hotel_ID, hotel_name) VALUES
(1, 'Luxury Palace'),
(2, 'Budget Inn'),
(3, 'Resort & Spa');

-- Address for hotels
INSERT INTO address (hotel_ID, street, city, district) VALUES
(1, '123 Main St', 'New York', 'Manhattan'),
(2, '456 Side St', 'Chicago', 'Loop'),
(3, '789 Beach Rd', 'Miami', 'South Beach');

-- Loyalty tiers
INSERT INTO loyalty (loyalty_id, loyalty_rank) VALUES
(1, 'bronze'),
(2, 'silver'),
(3, 'gold');

-- Guests with edge cases
INSERT INTO guest (guest_ID, birth_date, b_points, loyalty_id, phone_number) VALUES
(1, '1990-01-01', 5, 1, '1234567890'),
(2, '2000-12-31', 25, 2, '9876543210'),
(3, '1950-06-15', 75, 3, '5555555555'),
(4, '2023-01-01', 0, 1, '1111111111'),  -- Very young guest
(5, NULL, 100, 3, '2222222222'),        -- NULL birth date
(6, '1900-01-01', -5, 1, '12345');      -- Invalid points and phone number

-- Guest names
INSERT INTO guest_name (guest_ID, g_first_Name, g_last_name) VALUES
(1, 'John', 'Doe'),
(2, 'Jane', 'Smith'),
(3, 'Robert', NULL),                     -- NULL last name
(4, 'Baby', 'Jones'),
(5, 'Test', 'User');

-- Room types
INSERT INTO room_type (type_ID, type_name, max_occupancy, price, bed_count, bed_type, description) VALUES
(1,  'Single', 1, 100, 1, 'Single', 'Basic room'),
(2,  'Double', 2, 200, 2, 'Queen', 'Comfort room'),
(3,  'Suite', 4, 500, 2, 'King', 'Luxury suite'),
(4,  'Suite', 6, 1000, 3, 'King', NULL);  -- NULL description

-- Rooms
INSERT INTO room (room_ID, type_ID, isClean, isAvailable) VALUES
(1, 1, 'Clean', TRUE),
(2, 2, 'Clean', TRUE),
(3, 3, 'In Progress', TRUE),
(4, 1, NULL, TRUE);  -- Invalid cleanliness status

-- Bookings with edge cases
INSERT INTO booking (booking_ID, guest_ID, room_ID, num_Of_Guests, check_in, check_out, b_status) VALUES
(1, 1, 1, 1, '2024-01-01', '2024-01-05', 'confirmed'),
(2, 2, 2, 2, '2024-01-31', '2024-12-12', 'confirmed'),  -- Check-out before check-in
(3, 3, 3, 6, '2024-03-01', '2024-03-05', 'pending'),    -- More guests than max_occupancy
(4, 4, 1, 0, '2024-04-01', '2024-04-05', 'cancelled'),  -- Invalid number of guests
(5, 1, 1, 1, NULL, '2024-05-05', 'confirmed')  ;      -- NULL check-in date

-- Payments
INSERT INTO payment (pay_ID, booking_ID, pay_method, pay_time, amount) VALUES
(1, 1, 'cash', 'check out', 500),
(2, 2, 'card', 'advance', 1000),
(3, 3, 'cash', 'advance', -100),         -- Negative amount
(4, 4, NULL, 'check out', 750);       -- NULL payment method
-- Employees
INSERT INTO employee (employee_ID, role) VALUES
(1, 'receptionist'),
(2, 'housekeeping'),
(3, 'receptionist');
-- Employee names
INSERT INTO employee_name (employee_ID, e_first_name, e_last_name) VALUES
(1, 'Alice', 'Johnson'),
(2, 'Bob', 'Williams'),
(3, 'Joe', 'Brown');                     -- Fixed duplicate primary key issue

-- Housekeeping
INSERT INTO housekeeping (employee_ID) VALUES
(2),
(1);                                     -- Error: employee is a receptionist

INSERT INTO administrator (admin_ID) VALUES
(1);

-- Schedule
INSERT INTO schedulee (schedulee_ID, employee_ID, room_ID, cleaning_date, status) VALUES
(1, 2, 1, '2024-01-01', 'Completed'),
(2, 2, 2, '2024-01-02', 'In Progress');





